"use strict";var __createBinding=this&&this.__createBinding||(Object.create?function(s,r,e,t){t===void 0&&(t=e);var i=Object.getOwnPropertyDescriptor(r,e);(!i||("get"in i?!r.__esModule:i.writable||i.configurable))&&(i={enumerable:!0,get:function(){return r[e]}}),Object.defineProperty(s,t,i)}:function(s,r,e,t){t===void 0&&(t=e),s[t]=r[e]}),__exportStar=this&&this.__exportStar||function(s,r){for(var e in s)e!=="default"&&!Object.prototype.hasOwnProperty.call(r,e)&&__createBinding(r,s,e)};Object.defineProperty(exports,"__esModule",{value:!0}),exports.ForgeCanvas=void 0,exports.registerFonts=registerFonts;const forgescript_1=require("@tryforge/forgescript"),canvas_1=require("@napi-rs/canvas"),node_fs_1=require("node:fs"),node_path_1=require("node:path"),undici_1=require("undici"),package_json_1=require("../package.json");async function registerFonts(s,r){for(const e of s){if(!(0,node_fs_1.existsSync)(e.src))throw forgescript_1.Logger.error(`Invalid font source. (${e.src})`);if((0,node_fs_1.statSync)(e.src).isFile()){let t=(0,node_path_1.basename)(e.src);if(!["ttf","otf","woff","woff2"].find(i=>t.endsWith(`.${i}`)))return;t=e.name??t.split(".").slice(0,-1).join("."),r&&canvas_1.GlobalFonts.has(t)&&forgescript_1.Logger.warn(`Font with name '${t}' already exists.`),canvas_1.GlobalFonts.registerFromPath(e.src,t),r&&forgescript_1.Logger.info(`Successfully registered '${t}'.`)}else return registerFonts((0,node_fs_1.readdirSync)(e.src).map(t=>({src:(0,node_path_1.join)(e.src,t)})),r)}}class ForgeCanvas extends forgescript_1.ForgeExtension{name="forge.canvas";description=package_json_1.description;version=package_json_1.version;init(){this.load(__dirname+"/functions")}}exports.ForgeCanvas=ForgeCanvas,canvas_1.Image.prototype.getBuffer=async function(){let s;if(this.src instanceof Uint8Array)return Buffer.from(this.src);if(typeof this.src=="string")if(this.src.startsWith("data:")){const r=this.src.split(",")[1];s=Buffer.from(r,"base64")}else if(/https?:\/\//.test(this.src)){const r=await(0,undici_1.fetch)(this.src);if(!r.ok)throw new Error(`Failed to fetch image from ${this.src}`);s=Buffer.from(await r.arrayBuffer())}else s=(0,node_fs_1.readFileSync)(this.src);else throw new Error("Invalid image source.");return s},__exportStar(require("./classes"),exports),__exportStar(require("./typings"),exports);
