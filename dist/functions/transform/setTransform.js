"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript");exports.default=new forgescript_1.NativeFunction({name:"$setTransform",description:"Sets the current transformation.",version:"1.0.0",brackets:!0,unwrap:!0,args:[{name:"canvas",description:"Name of the canvas.",type:forgescript_1.ArgType.String,required:!1,rest:!1},{name:"a",description:"The cell in the first row and first column of the matrix.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"b",description:"The cell in the second row and first column of the matrix.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"c",description:"The cell in the first row and second column of the matrix.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"d",description:"The cell in the second row and second column of the matrix.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"e",description:"The cell in the first row and third column of the matrix.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"f",description:"The cell in the second row and third column of the matrix.",type:forgescript_1.ArgType.Number,required:!0,rest:!1}],async execute(e,[r,...s]){const t=r?e.canvasManager?.get(r):e.canvasManager?.lastCurrent;return t?(t.ctx.setTransform(s),this.success()):this.customError("No canvas")}});
