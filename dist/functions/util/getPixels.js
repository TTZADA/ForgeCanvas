"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript"),__1=require("../..");exports.default=new forgescript_1.NativeFunction({name:"$getPixels",aliases:["$getImageData"],description:"Returns an array of pixels. (their colors)",version:"1.0.0",brackets:!0,unwrap:!0,args:[{name:"canvas",description:"Name of the canvas.",type:forgescript_1.ArgType.String,required:!1,rest:!1},{name:"x",description:"The X coordinate of the top-left corner of the rectangle from which the pixel colors will be extracted.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"y",description:"The Y coordinate of the top-left corner of the rectangle from which the pixel colors will be extracted.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"width",description:"The width of the rectangle from which the pixel colors will be extracted.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"height",description:"The height of the rectangle from which the pixel colors will be extracted.",type:forgescript_1.ArgType.Number,required:!0,rest:!1},{name:"type",description:"The pixels (image data) content type.",type:forgescript_1.ArgType.Enum,enum:__1.ColorDataType,required:!1,rest:!1}],async execute(e,[r,s,i,n,o,c]){const a=r?e.canvasManager?.get(r):!r&&e.canvasManager?.current?.length!==0?e.canvasManager?.current?.[e.canvasManager?.current?.length-1]:null;return a?this.success(`[${a.getPixels(s,i,n,o,c).map(t=>typeof t=="string"?`"${t}"`:t).join(", ")}]`):this.customError("No canvas")}});
