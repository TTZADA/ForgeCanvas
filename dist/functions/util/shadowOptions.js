"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript");exports.default=new forgescript_1.NativeFunction({name:"$shadowOptions",aliases:["$shadowConfig"],description:"Sets or returns the shadow options in a canvas.",version:"1.1.0",brackets:!0,unwrap:!0,args:[{name:"canvas",description:"Name of the canvas.",type:forgescript_1.ArgType.String,required:!1,rest:!1},{name:"options",description:"The options.",type:forgescript_1.ArgType.Json,required:!0,rest:!1}],async execute(s,[e,r]){const t=(e?s.canvasManager?.get(e):!e&&s.canvasManager?.current?.length!==0?s.canvasManager?.current?.[s.canvasManager?.current?.length-1]:null)?.ctx;if(!t)return this.customError("No canvas");typeof r=="string"&&(r=JSON.parse(r));const a={color:"shadowColor",blur:"shadowBlur",offsetX:"shadowOffsetX",offsetY:"shadowOffsetY"};if(!Array.isArray(r))for(const n in r)t[a?.[n]]=r[x];const o=[];for(const n in r)o.push(t[a[n]]);return this.success(Array.isArray(r)?JSON.stringify(o):void 0)}});
