"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript"),__1=require("../..");exports.default=new forgescript_1.NativeFunction({name:"$measureText",description:"Measures text.",version:"1.0.0",brackets:!1,unwrap:!0,args:[{name:"canvas",description:"Name of the canvas.",type:forgescript_1.ArgType.String,required:!1,rest:!1},{name:"text",description:"The text to measure.",type:forgescript_1.ArgType.String,required:!0,rest:!1},{name:"font",description:"The font.",type:forgescript_1.ArgType.String,required:!0,rest:!1},{name:"property",description:"The result's property to return.",type:forgescript_1.ArgType.Enum,enum:__1.MeasureTextProperty,required:!1,rest:!1}],async execute(e,[t,a,u,r]){const s=t?e.canvasManager?.get(t):!t&&e.canvasManager?.current?.length!==0?e.canvasManager?.current?.[e.canvasManager?.current?.length-1]:null;if(!s)return this.customError("No canvas");const n=s.measureText(a,u);return this.success(r!==null?n[__1.MeasureTextProperty[typeof r=="string"?__1.MeasureTextProperty[r]:r]]:JSON.stringify(n))}});
