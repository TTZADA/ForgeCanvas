"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript"),gifsx_1=require("@gifsx/gifsx");exports.default=new forgescript_1.NativeFunction({name:"$indexedToHex",description:"Converts indexed pixels to HEX",version:"1.2.1",brackets:!0,unwrap:!0,args:[{name:"palette",description:"The palette to use for the conversion.",type:forgescript_1.ArgType.Json,required:!0,rest:!1},{name:"transparent",description:"The index of the transparent color in the palette.",type:forgescript_1.ArgType.Number,required:!1,rest:!1},{name:"alwaysAlpha",description:"Determines whether to always include the alpha channel in the output. (default: false)",type:forgescript_1.ArgType.Boolean,required:!1,rest:!1},{name:"allowShort",description:"Whether to allow short hex output. (default: false)",type:forgescript_1.ArgType.Boolean,required:!1,rest:!1},{name:"pixels",description:"The pixels to convert into HEX.",type:forgescript_1.ArgType.Number,check:e=>e>=0&&e<=255,required:!0,rest:!0}],async execute(e,[r,s,o,n,a]){try{const t=(0,gifsx_1.indexedToHex)(Uint8Array.from(a),Uint8Array.from(r),s,o??!1,n??!1);return this.success(`[${t.map(i=>`"${i}"`).join(", ")}]`)}catch(t){return this.customError(t.toString())}}});
