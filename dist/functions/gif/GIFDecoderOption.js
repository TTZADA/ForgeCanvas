"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript"),__1=require("../..");exports.default=new forgescript_1.NativeFunction({name:"$GIFDecoderOption",aliases:["$decoderOption","$GIFDecoderProperty","$decoderProperty"],description:"Sets or returns a GIF Frame option.",version:"1.2.0",brackets:!0,unwrap:!0,args:[{name:"gif",description:"Name of the Decoder.",type:forgescript_1.ArgType.String,required:!0,rest:!1},{name:"option",description:"Option to get.",type:forgescript_1.ArgType.Enum,enum:__1.DecoderOption,required:!0,rest:!1}],async execute(o,[n,r]){const t=o.gifManager?.getDecoder(n);if(!t)return this.customError("No frame");const e=t?.[typeof r=="number"?__1.DecoderOption[r]:r];return e instanceof Uint8ClampedArray||e instanceof ArrayBuffer?e instanceof Uint8ClampedArray?this.success(`[${Array.from(e).join(", ")}]`):this.success(`[${Array.from(new Uint8Array(e)).join(", ")}]`):this.success(e)}});
