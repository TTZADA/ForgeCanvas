"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript"),__1=require("../.."),gifsx_1=require("@gifsx/gifsx"),undici_1=require("undici"),promises_1=require("node:fs/promises");exports.default=new forgescript_1.NativeFunction({name:"$newGIFDecoder",aliases:["$createGIFDecoder","$createDecoder","$GIFDecoder","$newDecoder"],description:"Creates a new GIF Decoder.",version:"1.2.0",brackets:!0,unwrap:!0,args:[{name:"gif",description:"Name of the new GIF Decoder.",type:forgescript_1.ArgType.String,required:!0,rest:!1},{name:"path",description:"Path to the GIF file.",type:forgescript_1.ArgType.String,required:!0,rest:!1},{name:"options",description:"Options for the GIF Decoder.",type:forgescript_1.ArgType.String,required:!1,rest:!1}],async execute(r,[n,e,s]){(!r.gifManager||!(r.gifManager instanceof __1.GIFManager))&&(r.gifManager=new __1.GIFManager);let i;if(e.startsWith("http://")||e.startsWith("https://")){const t=await(0,undici_1.fetch)(e);if(!t.ok)return this.customError(`Failed to fetch ${e}`);i=await t.arrayBuffer()}else if(e.startsWith("encoder://")){const t=r.gifManager.getEncoder(e.slice(10));if(!t)return this.customError("No encoder");i=t.getBuffer()}else i=await(0,promises_1.readFile)(e,null);return r.gifManager.setDecoder(n,new gifsx_1.Decoder(Buffer.from(i),s?r.gifManager.getDecodeOptions(s):void 0)),this.success()}});
