"use strict";Object.defineProperty(exports,"__esModule",{value:!0});const forgescript_1=require("@tryforge/forgescript");exports.default=new forgescript_1.NativeFunction({name:"$barOptions",description:"Sets options for progress bars.",version:"1.2.0",brackets:!0,unwrap:!0,args:[{name:"options",description:"Options (type:normal/ratio/pie, height:number, maxWidth:number, background:color/gradient/pattern, radius:...number).",type:forgescript_1.ArgType.String,required:!0,rest:!0}],async execute(d,[u]){const c=u.map(r=>{const o=r.trim().split(":");return[o[0],o.slice(1)]}),n=d.getEnvironmentKey("progressBarOptions")??{};for(let[r,o]of c){const e=o;switch(r){case"type":if(!["normal","pie","none"].includes(e[0]))return this.customError("Invalid type");n.type=e[0]!=="none"?e[0]:void 0;break;case"draw-type":if(!["fill","stroke","clear","none"].includes(e[0]))return this.customError("Invalid draw type");n["draw-type"]=e[0]!=="none"?e[0]:void 0;break;case"background-style":n["background-style"]=e[0]!=="none"?e.join(":"):void 0;break;case"background-radius":const i=e.map(t=>parseFloat(t));n[r]=e[0]!=="none"?i.length===1?i[0]:i:void 0;break;case"background-padding":n["background-padding"]=e[0]!=="none"?parseFloat(e[0]):void 0;break;case"background-type":if(!["fill","stroke","clear","none"].includes(e[0]))return this.customError("Invalid background type");n["background-type"]=e[0]!=="none"?e[0]:void 0;break;case"radius":const a=e.map(t=>parseFloat(t));n.radius=e[0]!=="none"?a.length===1?a[0]:a:void 0;break;case"direction":if(!["horizontal","vertical","none"].includes(e[0]))return this.customError("Invalid direction");n.direction=e[0]!=="none"?e[0]:void 0;case"clip-radius":const s=e.map(t=>parseFloat(t));n["clip-radius"]=e[0]!=="none"?s.length===1?s[0]:s:void 0;break;case"left":n.left=e[0]!=="none"?e.join(":"):void 0;break;default:return this.customError(`Unknown bar option: ${r}`)}}return d.setEnvironmentKey("progressBarOptions",n),this.success()}});
